
#  +++=>>> * %n  Edition: %v  Last changed: %f  By: %w *
# **
#  +++=>>> '%l'
# Currently extracted for edit by: ''
#
# Crosscode makefile for 68000 USNET
ENDIAN=BIG		#Motorola byte order BIG, Intel LITTLE

#user options ==============================================================

TRACE=3			#trace level, 0=none, 9=maximum

BASE=0x403000		#load base: 10000 for the Cogent 68030 board
			#	    403000 for the Motorola 68360 board

DSPLY=1			#display device: 1 uses Motorola monitor function
			#		 2 2681 in the Cogent 68030 board

TIMER=1			#timer: 1 uses Motorola monitor function
			#	2 PIP in the Cogent 68030 board
			#	3 CPM in the 68360

PTH = m:\public\xcode	#where the compiler is

#tool names =================================================================

LPTH = $(PTH)\lib\lib332
INC = $(PTH)\lib\include
CFLAGS = -V CPU32 -I $(INC) -DTRACE=$(TRACE) -D$(ENDIAN) -DDSPLY=$(DSPLY) -DTIMER=$(TIMER)
AFLAGS = -V CPU32
LFLAGS = -f tmp.spc
CC = $(PTH)\cmd\cc68000
AS = $(PTH)\cmd\as68000
LNK = $(PTH)\cmd\linker
LIBR = $(PTH)\cmd\liber

#default rules ===========================================================
.SUFFIXES: .sym .map .dwn .out .o .s .c

.c.o:				# C to object
	set PATH=$(PTH)\cmd
	$(CC) $(CFLAGS) $<
.c.s: 			# C to listing
	set PATH=$(PTH)\cmd
	$(CC) $< $(CFLAGS) -S
	$(AS) $*.s $(AFLAGS)
.asm.o:				# assembly to object
	set PATH=$(PTH)\cmd
	$(AS) $< $(AFLAGS)
.out.dwn:			# binary to hex
	$(PTH)\cmd\down -d mot $< -D entry=START
	$(PTH)\cmd\sym $< >$*.map

usnet.a:			#default make entry

#object dependencies ======================================================
INCS = net.h local.h support.h
ping.o: ping.c $(INCS) icmp.h
fttest.o: fttest.c $(INCS)
ltest.o: ltest.c $(INCS)
bootp.o: bootp.c $(INCS)
tftp.o: tftp.c $(INCS)
ftp.o: ftp.c $(INCS)
support.o: support.c $(INCS) driver.h
nprintf.o: nprintf.c 
nscanf.o: nscanf.c 
route.o: route.c $(INCS)
socket.o: socket.c socket.h $(INCS)
ip.o: ip.c $(INCS)
icmp.o: icmp.c $(INCS) icmp.h
arp.o: arp.c $(INCS)
rarp.o: rarp.c $(INCS)
ethernet.o: ethernet.c $(INCS) ethernet.h
slip.o: slip.c $(INCS) 
wrap.o: wrap.c $(INCS)
udp.o: udp.c $(INCS)
tcp.o: tcp.c $(INCS)
netconf.o: netconf.c $(INCS) drvconf.h
net.o: net.c $(INCS)
driver.o: driver.c $(INCS) driver.h
wd8003.o: wd8003.c $(INCS) driver.h ethernet.h ns8390.h
ne2000.o: ne2000.c $(INCS) driver.h ethernet.h ns8390.h
en360.o: en360.c $(INCS) driver.h ethernet.h m360.h
i8250.o: i8250.c $(INCS) driver.h 
d2681.o: d2681.c $(INCS) driver.h
hcsci11.o: hcsci11.c $(INCS) driver.h
hcsci16.o: hcsci16.c $(INCS) driver.h
h64180.o: h64180.c $(INCS) driver.h
suppa.o: suppa.asm
start.o: start.asm

#control files ============================================================

tmp.spc:
	echo partition { overlay { >tmp.spc
	echo     region {} reset[addr=0]; >>tmp.spc
	echo     region {} vects[addr=8]; >>tmp.spc
	echo     region {} code[addr= $(BASE)]; >>tmp.spc
	echo     region {} MAIN; >>tmp.spc
	echo     region {} const; >>tmp.spc
	echo     region {} string; >>tmp.spc
	echo     DATA = $$; >>tmp.spc
	echo } o1; } ROM; >>tmp.spc
	echo partition { overlay { >>tmp.spc
	echo     region {} data[roundsize=4]; >>tmp.spc
	echo     region {} ram[roundsize=4]; >>tmp.spc
	echo     region {} malloc[size=0x200]; >>tmp.spc
	echo     region {} stack[size=0x800]; >>tmp.spc
	echo     STKTOP = $$; >>tmp.spc
	echo }  o2; } RAM; >>tmp.spc

#building the libraries =====================================================

usnet.a:	 netconf.o net.o socket.o route.o ftp.o tftp.o tcp.o udp.o ip.o icmp.o arp.o rarp.o ethernet.o en360.o slip.o d2681.o wrap.o support.o driver.o suppa.o nprintf.o nscanf.o clock.o putchr.o
	erase usnet.a
	$(LIBR) -c usnet.a netconf.o net.o socket.o route.o ftp.o
	$(LIBR) -a usnet.a tftp.o tcp.o udp.o ip.o icmp.o arp.o rarp.o
	$(LIBR) -a usnet.a ethernet.o en360.o slip.o
	$(LIBR) -a usnet.a d2681.o wrap.o nprintf.o nscanf.o support.o
	$(LIBR) -a usnet.a driver.o clock.o putchr.o suppa.o

#building the programs =====================================================

emtest:	emtest.dwn
emtest.out:	tmp.spc start.o emtest.o usnet.a
	set PATH=$(PTH)\cmd
	$(LNK) $(LFLAGS) -o $@ start.o $*.o usnet.a $(LPTH)\libc.a

ltest:	ltest.dwn
ltest.out:	tmp.spc ltest.o usnet.a
	set PATH=$(PTH)\cmd
	$(CC) $(CFLAGS) -DWRAPTEST net.c
	$(CC) $(CFLAGS) -DWRAPTEST support.c
	$(LNK) $(LFLAGS) -o $@ start.o $*.o net.o support.o usnet.a $(LPTH)\libc.a
	erase net.o
	erase support.o

#utility functions  =======================================================

clean:
	erase *.lst
	erase *.xrf
	erase *.dwn
	erase *.out
	erase *.o
	erase *.map
	erase tmp.*
	erase usnet.a
