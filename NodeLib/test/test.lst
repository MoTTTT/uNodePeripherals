C51 COMPILER V3.40,  TEST                                                                  22/05/97  22:22:39  PAGE 1   


DOS C51 COMPILER V3.40, COMPILATION OF MODULE TEST
OBJECT MODULE PLACED IN TEST.OBJ
COMPILER INVOKED BY: D:\C51\BIN\C51.EXE TEST.C CODE SYMBOLS DEBUG OBJECTEXTEND

stmt level    source

   1          /*			Copyright Q Solutions				*/
   2          /*	File:		test.c						*/
   3          /*	Programmer:	MoT						*/
   4          /*	Module:		Library routine test program			*/
   5          /*									*/
   6          /*			History						*/
   7          /* 15:58 20/04/1997  	Written from scratch				*/
   8          /*			Initialisation and main loop.			*/
   9          
  10          #pragma		ROM (COMPACT)
  11          #pragma		LARGE
  12          
  13          /* Library files							*/
  14          #include	<stdio.h>
  15          #include	<reg552.h>
  16          
  17          typedef	unsigned int uint;		/* Optimise for size & speed:	*/
  18          typedef	unsigned char byte;		/* Use unsigned char and int	*/
  19          
  20          #include	<iic.h>			/* IIC Bus routines		*/
  21          #include	<rtc.h>			/* Real time clock routines	*/
  22          #include	<adc.h>			/* Analog to Digital routines	*/
  23          #include	<nodelcd.h>		/* Local LCD module routines	*/
  24          #include	<nkey.h>		/* Local Keypad module routines	*/
  25          #include	<wdog.h>		/* Watchdog refresh routine	*/
  26          
  27          #define		IIC_ADDR 0x68		/* IIC Slave Address		*/
  28          #define		REM_ADDR 0x60		/* IIC Remote Address		*/
  29          #define		IO_NLCD	0x01		/* Output to uNode LCD		*/
  30          
  31          const char *signon1= "  uNode Library ";/* Line 1 of sign on screen	*/
  32          const char *signon2= "     Tester     ";/* Line 2 of signon screen	*/
  33          
  34          char	out_stream= IO_NLCD;		/* Output port			*/
  35          uint	counter;			/* Routine cycle counter	*/
  36          byte	iiccount= 0;			/* IIC input frame counter	*/
  37          char idata iic_in[2];			/* IIC Bus input buffer		*/
  38          char idata iic_out[2];			/* IIC Bus output buffer	*/
  39          
  40          void	signon		( )		/* Splash Screen		*/
  41          {
  42   1      	paint_nlcd ( signon1, signon2 );
  43   1      }
  44          
  45          void	initialise	( )		/* Initialise Hardware		*/
  46          {
  47   1      	EA=		1;		/* Enable Global Interrupt	*/
  48   1      	init_nlcd	( );		/* Initialise local LCD		*/
  49   1      	init_nkey	( );		/* Initialise local keypad	*/
  50   1      	iic_init	( IIC_ADDR );	/* Initialise IIC Bus		*/
  51   1      	signon		( );		/* Splash screen		*/
  52   1      //	iic_sset	( iic_in, 1 );	/* Set up slave input buffer	*/
  53   1      	init_rtc	( );
  54   1      	init_adc	( );
  55   1      }
  56          
  57          char	putchar		( char out )
  58          {
  59   1      	switch	( out_stream )
C51 COMPILER V3.40,  TEST                                                                  22/05/97  22:22:39  PAGE 2   

  60   1      	{
  61   2      	case IO_NLCD:			/* Write to local LCD		*/
  62   2      		nputchar	( out );
  63   2      		break;
  64   2      	}
  65   1      	return	( out );
  66   1      }
  67          
  68          void	service_iicin	( )
  69          {
  70   1      	if	( iic_sready )
  71   1      	{
  72   2      		iiccount++;
  73   2      		set_nlcd( NLCD_L1 );
  74   2      		printf	( "%3bu, Code: %3bu", iiccount, iic_in[0] );
  75   2      		iic_sready=0;
  76   2      	}
  77   1      }
  78          
  79          void	service_keypad	( )		/* Read and process keypad	*/
  80          {
  81   1      byte	in;
  82   1      	if	( x1_flag )
  83   1      	{
  84   2      		in= ngetkey	( );
  85   2      		switch	( in )
  86   2      		{
  87   3      		case 0:
  88   3      			set_nlcd	( NLCD_L2 );
  89   3      			printf		( "  Sending CLEAR " );
  90   3      			iic_out[0]= 0;
  91   3      			iic_mtx(REM_ADDR, 2, iic_out );
  92   3      			break;
  93   3      		case 1:
  94   3      			set_nlcd	( NLCD_L2 );
  95   3      			printf		( "  Sending 'A'   " );
  96   3      			iic_out[0]= 2;
  97   3      			iic_out[1]= 'A';
  98   3      			iic_mtx(REM_ADDR, 2, iic_out );
  99   3      			break;
 100   3      		case 2:
 101   3      			set_nlcd	( NLCD_L2 );
 102   3      			printf		( "  Sending CLEAR " );
 103   3      			break;
 104   3      		case 3:
 105   3      			set_nlcd	( NLCD_L2 );
 106   3      			printf		( "  Sending CLEAR " );
 107   3      			break;
 108   3      		default:
 109   3      			set_nlcd	( NCLEAR );
 110   3      //			paint_nlcd    ( "        OK      ",
 111   3      //					"  Press Another " );
 112   3      			break;
 113   3      		}
 114   2      	}
 115   1      }
 116          
 117          void	main	( void )		/* Main Loop			*/
 118          {
 119   1      int	i;
 120   1      //	initialise	( );		/* Set up drivers, sign on	*/
 121   1      	while	( 1 )
 122   1      	{
 123   2      		P4=	0xFF;
 124   2      //		while	( i++ );
 125   2      //		i++;
C51 COMPILER V3.40,  TEST                                                                  22/05/97  22:22:39  PAGE 3   

 126   2      		P4=	0x00;
 127   2      //		while	( i++ );
 128   2      	}
 129   1      	while	( 1 )
 130   1      	{
 131   2      		wdog	( 10 );		/* Refresh watchdog		*/
 132   2      		adc_start( );
 133   2      		while	( adc_read );
 134   2      		set_nlcd( NLCD_L1 );
 135   2      		printf	( " %02bX ", adc[1] );
 136   2      //		set_nlcd( NLCD_L1 );
 137   2      //		show_time( );
 138   2      //		service_keypad	( );	/* Process input		*/
 139   2      //		service_iicin	( );	/* Process input		*/
 140   2      		counter++;		/* Increment loop counter	*/
 141   2      	}
 142   1      }
C51 COMPILER V3.40,  TEST                                                                  22/05/97  22:22:39  PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION signon (BEGIN)
                                           ; SOURCE LINE # 40
                                           ; SOURCE LINE # 41
                                           ; SOURCE LINE # 42
0000 900000  R     MOV     DPTR,#signon2
0003 E0            MOVX    A,@DPTR
0004 F9            MOV     R1,A
0005 A3            INC     DPTR
0006 E0            MOVX    A,@DPTR
0007 FA            MOV     R2,A
0008 A3            INC     DPTR
0009 E0            MOVX    A,@DPTR
000A 900000  E     MOV     DPTR,#?_paint_nlcd?BYTE+03H
000D C9            XCH     A,R1
000E F0            MOVX    @DPTR,A
000F A3            INC     DPTR
0010 EA            MOV     A,R2
0011 F0            MOVX    @DPTR,A
0012 A3            INC     DPTR
0013 E9            MOV     A,R1
0014 F0            MOVX    @DPTR,A
0015 900000  R     MOV     DPTR,#signon1
0018 E0            MOVX    A,@DPTR
0019 FB            MOV     R3,A
001A A3            INC     DPTR
001B E0            MOVX    A,@DPTR
001C FA            MOV     R2,A
001D A3            INC     DPTR
001E E0            MOVX    A,@DPTR
001F F9            MOV     R1,A
0020 120000  E     LCALL   _paint_nlcd
                                           ; SOURCE LINE # 43
0023 22            RET     
             ; FUNCTION signon (END)

             ; FUNCTION initialise (BEGIN)
                                           ; SOURCE LINE # 45
                                           ; SOURCE LINE # 46
                                           ; SOURCE LINE # 47
0000 D2AF          SETB    EA
                                           ; SOURCE LINE # 48
0002 120000  E     LCALL   init_nlcd
                                           ; SOURCE LINE # 49
0005 120000  E     LCALL   init_nkey
                                           ; SOURCE LINE # 50
0008 7F68          MOV     R7,#068H
000A 120000  E     LCALL   _iic_init
                                           ; SOURCE LINE # 51
000D 120000  R     LCALL   signon
                                           ; SOURCE LINE # 53
0010 120000  E     LCALL   init_rtc
                                           ; SOURCE LINE # 54
0013 120000  E     LCALL   init_adc
                                           ; SOURCE LINE # 55
0016 22            RET     
             ; FUNCTION initialise (END)

             ; FUNCTION _putchar (BEGIN)
0000 900000  R     MOV     DPTR,#out
0003 EF            MOV     A,R7
0004 F0            MOVX    @DPTR,A
                                           ; SOURCE LINE # 57
                                           ; SOURCE LINE # 58
C51 COMPILER V3.40,  TEST                                                                  22/05/97  22:22:39  PAGE 5   

                                           ; SOURCE LINE # 59
0005 900000  R     MOV     DPTR,#out_stream
0008 E0            MOVX    A,@DPTR
0009 14            DEC     A
000A 7008          JNZ     ?C0003
                                           ; SOURCE LINE # 60
                                           ; SOURCE LINE # 61
000C         ?C0004:
                                           ; SOURCE LINE # 62
000C 900000  R     MOV     DPTR,#out
000F E0            MOVX    A,@DPTR
0010 FF            MOV     R7,A
0011 120000  E     LCALL   _nputchar
                                           ; SOURCE LINE # 63
                                           ; SOURCE LINE # 64
0014         ?C0003:
                                           ; SOURCE LINE # 65
0014 900000  R     MOV     DPTR,#out
0017 E0            MOVX    A,@DPTR
0018 FF            MOV     R7,A
                                           ; SOURCE LINE # 66
0019         ?C0005:
0019 22            RET     
             ; FUNCTION _putchar (END)

             ; FUNCTION service_iicin (BEGIN)
                                           ; SOURCE LINE # 68
                                           ; SOURCE LINE # 69
                                           ; SOURCE LINE # 70
0000 300023  E     JNB     iic_sready,?C0007
                                           ; SOURCE LINE # 71
                                           ; SOURCE LINE # 72
0003 900000  R     MOV     DPTR,#iiccount
0006 E0            MOVX    A,@DPTR
0007 04            INC     A
0008 F0            MOVX    @DPTR,A
                                           ; SOURCE LINE # 73
0009 7F80          MOV     R7,#080H
000B 120000  E     LCALL   _set_nlcd
                                           ; SOURCE LINE # 74
000E 7B05          MOV     R3,#05H
0010 7A00    R     MOV     R2,#HIGH ?SC_34
0012 7900    R     MOV     R1,#LOW ?SC_34
0014 900000  R     MOV     DPTR,#iiccount
0017 E0            MOVX    A,@DPTR
0018 900000  E     MOV     DPTR,#?_printf?BYTE+03H
001B F0            MOVX    @DPTR,A
001C 7800    R     MOV     R0,#iic_in
001E E6            MOV     A,@R0
001F A3            INC     DPTR
0020 F0            MOVX    @DPTR,A
0021 120000  E     LCALL   _printf
                                           ; SOURCE LINE # 75
0024 C200    E     CLR     iic_sready
                                           ; SOURCE LINE # 76
                                           ; SOURCE LINE # 77
0026         ?C0007:
0026 22            RET     
             ; FUNCTION service_iicin (END)

             ; FUNCTION service_keypad (BEGIN)
                                           ; SOURCE LINE # 79
                                           ; SOURCE LINE # 80
                                           ; SOURCE LINE # 82
0000 30006F  E     JNB     x1_flag,?C0015
                                           ; SOURCE LINE # 83
C51 COMPILER V3.40,  TEST                                                                  22/05/97  22:22:39  PAGE 6   

                                           ; SOURCE LINE # 84
0003 120000  E     LCALL   ngetkey
;---- Variable 'in' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 85
0006 EF            MOV     A,R7
0007 14            DEC     A
0008 6026          JZ      ?C0011
000A 14            DEC     A
000B 6042          JZ      ?C0012
000D 14            DEC     A
000E 604E          JZ      ?C0013
0010 2403          ADD     A,#03H
0012 7059          JNZ     ?C0014
                                           ; SOURCE LINE # 86
                                           ; SOURCE LINE # 87
0014         ?C0010:
                                           ; SOURCE LINE # 88
0014 7FC0          MOV     R7,#0C0H
0016 120000  E     LCALL   _set_nlcd
                                           ; SOURCE LINE # 89
0019 7B05          MOV     R3,#05H
001B 7A00    R     MOV     R2,#HIGH ?SC_51
001D 7900    R     MOV     R1,#LOW ?SC_51
001F 120000  E     LCALL   _printf
                                           ; SOURCE LINE # 90
0022 E4            CLR     A
0023 7800    R     MOV     R0,#iic_out
0025 F6            MOV     @R0,A
                                           ; SOURCE LINE # 91
0026 7F60          MOV     R7,#060H
0028 7D02          MOV     R5,#02H
002A 7B00    R     MOV     R3,#LOW iic_out
002C 120000  E     LCALL   _iic_mtx
                                           ; SOURCE LINE # 92
002F 22            RET     
                                           ; SOURCE LINE # 93
0030         ?C0011:
                                           ; SOURCE LINE # 94
0030 7FC0          MOV     R7,#0C0H
0032 120000  E     LCALL   _set_nlcd
                                           ; SOURCE LINE # 95
0035 7B05          MOV     R3,#05H
0037 7A00    R     MOV     R2,#HIGH ?SC_68
0039 7900    R     MOV     R1,#LOW ?SC_68
003B 120000  E     LCALL   _printf
                                           ; SOURCE LINE # 96
003E 7800    R     MOV     R0,#iic_out
0040 7602          MOV     @R0,#02H
                                           ; SOURCE LINE # 97
0042 08            INC     R0
0043 7641          MOV     @R0,#041H
                                           ; SOURCE LINE # 98
0045 7F60          MOV     R7,#060H
0047 7D02          MOV     R5,#02H
0049 7B00    R     MOV     R3,#LOW iic_out
004B 120000  E     LCALL   _iic_mtx
                                           ; SOURCE LINE # 99
004E 22            RET     
                                           ; SOURCE LINE # 100
004F         ?C0012:
                                           ; SOURCE LINE # 101
004F 7FC0          MOV     R7,#0C0H
0051 120000  E     LCALL   _set_nlcd
                                           ; SOURCE LINE # 102
0054 7B05          MOV     R3,#05H
0056 7A00    R     MOV     R2,#HIGH ?SC_51
C51 COMPILER V3.40,  TEST                                                                  22/05/97  22:22:39  PAGE 7   

0058 7900    R     MOV     R1,#LOW ?SC_51
005A 120000  E     LCALL   _printf
                                           ; SOURCE LINE # 103
005D 22            RET     
                                           ; SOURCE LINE # 104
005E         ?C0013:
                                           ; SOURCE LINE # 105
005E 7FC0          MOV     R7,#0C0H
0060 120000  E     LCALL   _set_nlcd
                                           ; SOURCE LINE # 106
0063 7B05          MOV     R3,#05H
0065 7A00    R     MOV     R2,#HIGH ?SC_51
0067 7900    R     MOV     R1,#LOW ?SC_51
0069 120000  E     LCALL   _printf
                                           ; SOURCE LINE # 107
006C 22            RET     
                                           ; SOURCE LINE # 108
006D         ?C0014:
                                           ; SOURCE LINE # 109
006D 7F01          MOV     R7,#01H
006F 120000  E     LCALL   _set_nlcd
                                           ; SOURCE LINE # 112
                                           ; SOURCE LINE # 113
                                           ; SOURCE LINE # 114
                                           ; SOURCE LINE # 115
0072         ?C0015:
0072 22            RET     
             ; FUNCTION service_keypad (END)

             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 117
                                           ; SOURCE LINE # 118
0000         ?C0016:
                                           ; SOURCE LINE # 121
                                           ; SOURCE LINE # 122
                                           ; SOURCE LINE # 123
0000 75C0FF        MOV     P4,#0FFH
                                           ; SOURCE LINE # 126
0003 E4            CLR     A
0004 F5C0          MOV     P4,A
                                           ; SOURCE LINE # 128
0006 80F8          SJMP    ?C0016
0008         ?C0018:
                                           ; SOURCE LINE # 129
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 131
0008 7F0A          MOV     R7,#0AH
000A 120000  E     LCALL   _wdog
                                           ; SOURCE LINE # 132
000D 120000  E     LCALL   adc_start
0010         ?C0020:
                                           ; SOURCE LINE # 133
0010 2000FD  E     JB      adc_read,?C0020
0013         ?C0021:
                                           ; SOURCE LINE # 134
0013 7F80          MOV     R7,#080H
0015 120000  E     LCALL   _set_nlcd
                                           ; SOURCE LINE # 135
0018 7B05          MOV     R3,#05H
001A 7A00    R     MOV     R2,#HIGH ?SC_85
001C 7900    R     MOV     R1,#LOW ?SC_85
001E 900000  E     MOV     DPTR,#adc+01H
0021 E0            MOVX    A,@DPTR
0022 900000  E     MOV     DPTR,#?_printf?BYTE+03H
0025 F0            MOVX    @DPTR,A
0026 120000  E     LCALL   _printf
C51 COMPILER V3.40,  TEST                                                                  22/05/97  22:22:39  PAGE 8   

                                           ; SOURCE LINE # 140
0029 900000  R     MOV     DPTR,#counter+01H
002C E0            MOVX    A,@DPTR
002D 04            INC     A
002E F0            MOVX    @DPTR,A
002F 7006          JNZ     ?C0023
0031 900000  R     MOV     DPTR,#counter
0034 E0            MOVX    A,@DPTR
0035 04            INC     A
0036 F0            MOVX    @DPTR,A
0037         ?C0023:
                                           ; SOURCE LINE # 141
0037 80CF          SJMP    ?C0018
                                           ; SOURCE LINE # 142
0039 22            RET     
             ; FUNCTION main (END)

C51 COMPILER V3.40,  TEST                                                                  22/05/97  22:22:39  PAGE 9   

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


AA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DAH  1
_paint_nlcd. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
T0 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B4H  1
AC . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D6H  1
P4 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C0H  1
counter. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_INT    0000H  2
T1 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B5H  1
ECM0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ECH  1
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
ECM1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EDH  1
ECM2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EEH  1
CMI0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CCH  1
CMI1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CDH  1
CMI2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CEH  1
T20V . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CFH  1
ECT0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E8H  1
ECT1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E9H  1
ECT2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EAH  1
ECT3 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EBH  1
CTI0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C8H  1
PCM0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FCH  1
signon . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     -----  -----
CTI1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C9H  1
PCM1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FDH  1
_wdog. . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CTI2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CAH  1
PCM2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FEH  1
CTI3 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CBH  1
RD . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B7H  1
ENS1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DEH  1
PCT0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F8H  1
PCT1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F9H  1
PCT2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FAH  1
RI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0098H  1
PCT3 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FBH  1
SI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DBH  1
INT0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B2H  1
CY . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D7H  1
TI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0099H  1
INT1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B3H  1
iic_sready . . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
OV . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D2H  1
x1_flag. . . . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
main . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     -----  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  INT      0000H  2
adc_read . . . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
adc. . . . . . . . . . . . . . . . . .  EXTERN   XDATA  ARRAY    -----  -----
WR . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B6H  1
_iic_init. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_set_nlcd. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
initialise . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     -----  -----
byte . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
init_nlcd. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
adc_start. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
IE0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0089H  1
IE1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008BH  1
init_adc . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
uint . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
signon1. . . . . . . . . . . . . . . .  PUBLIC   XDATA  PTR      0002H  3
signon2. . . . . . . . . . . . . . . .  PUBLIC   XDATA  PTR      0005H  3
CR0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D8H  1
C51 COMPILER V3.40,  TEST                                                                  22/05/97  22:22:39  PAGE 10  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


CR1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D9H  1
ES0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ACH  1
ET0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A9H  1
ES1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ADH  1
out_stream . . . . . . . . . . . . . .  PUBLIC   XDATA  CHAR     0008H  1
_nputchar. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ET1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ABH  1
EAD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AEH  1
TF0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008DH  1
ET2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EFH  1
TF1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008FH  1
RB8. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009AH  1
EX0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A8H  1
IT0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0088H  1
TB8. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009BH  1
EX1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AAH  1
IT1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008AH  1
P. . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D0H  1
init_nkey. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SM0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009FH  1
_iic_mtx . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SM1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009EH  1
SM2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009DH  1
PS0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BCH  1
PT0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B9H  1
PS1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BDH  1
PT1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BBH  1
PAD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BEH  1
RS0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D3H  1
PT2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FFH  1
TR0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008CH  1
RS1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D4H  1
TR1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008EH  1
service_keypad . . . . . . . . . . . .  PUBLIC   CODE   PROC     -----  -----
  in . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
PX0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B8H  1
PX1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BAH  1
_putchar . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     -----  -----
  out. . . . . . . . . . . . . . . . .  AUTO     XDATA  CHAR     0000H  1
init_rtc . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
iiccount . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0009H  1
service_iicin. . . . . . . . . . . . .  PUBLIC   CODE   PROC     -----  -----
REN. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009CH  1
STA. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DDH  1
iic_in . . . . . . . . . . . . . . . .  PUBLIC   IDATA  ARRAY    0000H  2
RXD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B0H  1
iic_out. . . . . . . . . . . . . . . .  PUBLIC   IDATA  ARRAY    0002H  2
TXD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B1H  1
F0 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D5H  1
STO. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DCH  1
_printf. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ngetkey. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    297    ----
   CONSTANT SIZE    =     93    ----
   XDATA SIZE       =     10       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =      4    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V3.40,  TEST                                                                  22/05/97  22:22:39  PAGE 11  

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
